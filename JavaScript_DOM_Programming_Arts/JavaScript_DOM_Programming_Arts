JavaScript DOM编程艺术 第二版

DOM是一套对文档的内容进行抽象和概念化的方法,是一种API(应用编程接口).例如:
    var xpos = document.getElementById("myelement").style.left

<script>标签放到HTML文档的最后,</body>标签之前,能使浏览器更快地加载页面.

数据类型:字符串,数值,布尔值,数组,对象.

对象:是自包含的数据集合,包含在对象的数据可以通过两种形式访问----属性(property)和方法(method).
    属性:是隶属于某个特定对象的变量.
    方法:是只有某个特定对象才能调用的函数.
    实例:是某个对象的具体个体.

    内建对象:是由Javascript语言本事提供的(内建在JavaScript语言里的对象).
        Array,Math,Date等内建对象可以帮助我们快速,简单地完成许多任务.

    宿主对象:是可以在Javascript脚本里使用一些已经预先定义好的其他对象,这些对象不是由Javascript语言提供的.
        具体到Web应用,这个环境就是浏览器,而由浏览器提供的预定义对象被称为宿主对象(由浏览器提供的对象).
        Form,Image,Element等,我们可以通过这些对象获取网页上表单,图像和各种表单元素等信息.
        另外一种宿主对象也可以用来获取网页上的任何一个元素的信息,它就是document对象.window对象对应着浏览器窗口本身.

    DOM节点:元素节点(element node),文本节点(text node),属性节点(attribute node)(这是其中三种).
        属性节点总是包含在元素节点.<p title="一个属性节点"> <p> 其中title="一个属性节点"是一个属性节点.
    DOM的每个节点都是一个对象.
    DOM获取元素节点方法,分别通过元素ID,通过标签名字,通过类名来获取.
        document.getElementById 将返回一个对象,该对象对应着文档里的一个特定的元素节点.
        document.getElementsByTagName 将返回一个对象数组,它们分别对应着文档里的一组特定的元素节点.
        document.getElementsByClassName 将返回一个对象数组,它们分别对应着文档里的一组特定的元素节点.

    获取和设置属性
        object.getAttribute(attribute)
        object.setAttribute(attribute,value) 通过setAttribute对文档做出修改后,在通过浏览器的view source
        (查看源代码)选项去查看文档的源代码时看到的仍是改变前的属性值,也就是说,setAttribute做出的修改不会反映在文档本身的
        源代码里.这种"表里不一"的现象源自DOM的工作模式:先加载文档的静态内容,再动态刷新,动态刷新不影响文档的静态内容.这正是
        DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面.